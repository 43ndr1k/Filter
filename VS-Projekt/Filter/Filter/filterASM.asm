; Listing generated by Microsoft (R) Optimizing Compiler Version 18.00.21005.1 

PUBLIC	?threshold@FilterASM@@QEAAXPEAPEAHHHHHH@Z	; FilterASM::threshold
; Function compile flags: /Odtp
_TEXT	SEGMENT
this$ = 8
grayData$ = 16
width$ = 24
height$ = 32
limit$ = 40
max$ = 48
min$ = 56
?threshold@FilterASM@@QEAAXPEAPEAHHHHHH@Z PROC		; FilterASM::threshold
; File d:\meine daten\dropbox\meine dropbox\studium\semester 4\assembler\projekt\vs-projekt\filter\filter\filterasm.cpp
; Line 3
;Sind nötig da unter 64-Bit System andere Parameteübergabe
;Werden vom Compiler generiert
	mov	DWORD PTR [rsp+32], r9d		;height
	mov	DWORD PTR [rsp+24], r8d		;width
	mov	QWORD PTR [rsp+16], rdx		;GrayData
	mov	QWORD PTR [rsp+8], rcx		;This

;Ab hier begint selbst getippter Code

;Sichern der Speicherstelle der Parameter
	push rbp					;Sichert den Blockpointer
	mov rbp, rsp				;Sichert die Stackpointeradresse (mit Blockpointer) 
	add rbp, 8					;Rechnet den Blockpointer aus der Adresse

;Hier die Register per Push  sichern
;Register r9d,r8d,rdx,rcx müssen nicht gesichert werden, da sie der Parameterübergabe dienen
	push rdx
	push rbx
	push rax

;Hier Code einfügen

	mov r9d, limit$[rbp]		;Lädt den Grenzwert 
	

	mov rdx, grayData$[rbp]		;Lädt die  Adresse der Spalte
	xor rcx,rcx					;Setzt rcx 0
	mov cx, width$[rbp]			;Ladt die Breite des Bildes

outer:
	xor rax,rax
	mov ax, height$[rbp]		;Lädt die Höhe des Bildes
	mov rdx , [rdx]				;Lädt die Adresse der Zeile in der Spalte (Zelle)
inner:
	xor rbx,rbx
	mov bx,max$[rbp]			;Schreibe Maximum auf rbx
	cmp [rdx],r9d				;Vergleiche die Zelle mit der Grenze
	cmovc bx,min$[rbp]			;Lade Minimum auf rbx
	mov [rdx],bx				;Schreibe Inhalt auf Zelle
	add rdx,4					;Nächste Zelle
	
	dec rax						;Zelle Fertig
	jnz inner					;Falls noch Zellen in Spalte Sprung nach INNER
	dec rcx						;Spalte fertig
	jz back						;Falls noch Spalten Sprung nach OUTER
	mov rdx, grayData$[rbp]		;Lädt die  Adresse der aktuellen Spalte
	add rdx, 8					;Berechnet die Adresse der nächsten Spalte
	mov grayData$[rbp],rdx		;Speichert die nächste Spalte auf dem Stack
	jmp outer

back:



;Hier die Register per Pop wiederherstellen
	pop rax
	pop rbx
	pop rdx
	
;Setzen auf alten Stackpointer (Parameter)
	sub rbp, 8					;Rechnet den Blockpointer wieder in die Adresse ein
	mov rsp, rbp				;Stellt die Stackpointeradresse wieder her (mit Blockpointer)
	pop rbp						;Lädt den Blockpointer

	ret	0
?threshold@FilterASM@@QEAAXPEAPEAHHHHHH@Z ENDP		; FilterASM::threshold
_TEXT	ENDS
END
